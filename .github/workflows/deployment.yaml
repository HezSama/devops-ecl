name: App deployment

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Deploy app to EKS environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  ENV: ${{ github.event.inputs.env }}

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker container Registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      run: |
        docker build -f app.api/app.dockerfile  -t vblue1594/max-weather1:${{ github.sha }} .
      
    - name: Push Docker image to Docker hub
      run: |
        docker push vblue1594/max-weather1:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.aws_rta }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: cuongnvecl-github-svc-tf-provision-infra
    
    - name: Grant access  
      run: |
        aws eks describe-access-entry \
        --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} \
        --principal-arn ${{ secrets.aws_rta }} \
        --region ${{ secrets.AWS_REGION }} ||\
          aws eks create-access-entry \
            --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} \
            --principal-arn ${{ secrets.aws_rta }} \
            --kubernetes-groups Viewers \
            --region ${{ secrets.AWS_REGION }}

        aws eks associate-access-policy --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} \
          --region ${{ secrets.AWS_REGION }} \
          --principal-arn ${{ secrets.aws_rta }} --access-scope type=cluster \
          --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy

    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: validate k8s namespaces
      run: |
        kubectl get ns max-weather-${{ github.event.inputs.env }} ||\
         kubectl create ns max-weather-${{ github.event.inputs.env }}
        
        echo "Verifying the eks cluster"
        kubectl config current-context | grep $EKS_CLUSTER_NAME  | wc -l
        kubectl get namespace -A

    - name: install cert-manager
      run: |
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        kubectl create namespace cert-manager || echo "cert-manager namespace already exists"
        helm install cert-manager jetstack/cert-manager \
        --namespace cert-manager --version v1.11.0 \
        --set installCRDs=true || echo "cert-manager already installed"

        kubectl get pod -n cert-manager

    - name : install nginx-controller
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm upgrade --install ingress-nginx ingress-nginx \
                --namespace ingress-nginx \
                --create-namespace \
                --repo https://kubernetes.github.io/ingress-nginx \
                --set service.type=LoadBalancer

    - name: Verify NGINX-Controller
      run: |
        kubectl wait --for=condition=ready \
        --timeout=60s -n ingress-nginx pod -l app.kubernetes.io/name=ingress-nginx

        kubectl get service ingress-nginx-controller -n ingress-nginx

    - name: Create docker secrets for private repo
      run: |
          kubectl create secret docker-registry app-api-ecl1-${{ github.event.inputs.env }} \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
            --docker-email=${{ secrets.DOCKERHUB_EMAIL }} \
            -n max-weather-${{ github.event.inputs.env }} || echo "Secret already exists"

    - name: Apply Kubernetes manifest
      run: |
        sed -i "s|ENV|${{ github.event.inputs.env }}|g" app.api/k8s/deployment.yaml
        sed -i "s|ENV|${{ github.event.inputs.env }}|g" app.api/k8s/certificate.yaml
        sed -i "s|ENV|${{ github.event.inputs.env }}|g" app.api/k8s/services.yaml
        sed -i "s|ENV|${{ github.event.inputs.env }}|g" app.api/k8s/ingress.yaml
        
        sed -i "s|CONTAINER_REGISTRY_BASE_URI|vblue1594/max-weather1:${{ github.sha }}|g" app.api/k8s/deployment.yaml

        kubectl apply -f app.api/k8s/deployment.yaml --timeout=120s
        kubectl apply -f app.api/k8s/certificate.yaml --timeout=120s
        kubectl apply -f app.api/k8s/services.yaml --timeout=120s
        kubectl apply -f app.api/k8s/ingress.yaml --timeout=120s

        kubectl create secret generic \
        --dry-run \
        -n default service-key \
        --from-literal key=v1.0-FFFFFFF-FFFFFFFF -o yaml

        sed -i "s|ENV|${{ github.event.inputs.env }}|g" app.api/k8s/issuer2.yaml
        kubectl apply -f app.api/k8s/issuer2.yaml --timeout=120s

        echo "Verify Pod Status"
        echo "kubectl get pods -n max-weather-${{ github.event.inputs.env }}"
        kubectl get pods -n max-weather-${{ github.event.inputs.env }} 

        echo "kubectl logs -n max-weather-${{ github.event.inputs.env }} <pod-name>"

        echo "kubectl get endpoints -n max-weather-${{ github.event.inputs.env }} svc-backend-api"
        kubectl get endpoints -n max-weather-${{ github.event.inputs.env }} svc-backend-api
        
        #Verify Certificate status
        kubectl describe certificate -n max-weather-${{ github.event.inputs.env }} app-tls-cert

        kubectl rollout status deployment/app-api -n max-weather-${{ github.event.inputs.env }} --timeout=300s ||\
        echo "Applying the manifest timeout"



  tvt:
    needs: deploy
    runs-on: ubuntu-latest

    steps:

      - name: Run multiple shell commands
        run: |
          echo "Process TVT"
          URL="https://${{ github.event.inputs.env }}-api.quyennv.com/v1/ping"
          MAX_RETRIES=5
          DELAY=2
          attempt=0
          sleep 10
          # Function to perform curl and handle retries
          while (( attempt < MAX_RETRIES )); do
              echo "Attempt $((attempt + 1)) to test URL: $URL"
              # Perform the curl request
              curl --fail --silent --show-error "$URL" && {
                  echo "URL responded successfully."
                  exit 0
              }
              ((attempt++))
              if (( attempt < MAX_RETRIES )); then
                  echo "Retrying in $DELAY seconds..."
                  sleep $DELAY
              fi
          done

          # If all attempts fail, throw an error
          echo "Error: URL test failed after $MAX_RETRIES attempts."
          exit 1